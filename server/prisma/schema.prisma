// Prisma schema for Workshop Booking System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  status    String   @default("Active")
  bookings  Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
  notifications Notification[]
}

enum Role {
  ADMIN
  CUSTOMER
}

model Workshop {
  id          String      @id @default(uuid())
  title       String
  description String
  instructor  String?     // Instructor name
  date        DateTime
  maxCapacity Int
  image       String?     // Image URL for the workshop
  category    String?     // Category for filtering
  price       Float       @default(0)
  status      String      @default("Active") // Workshop status: Active, Completed, Draft
  timeSlots   TimeSlot[]
  bookings    Booking[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deleted     Boolean    @default(false)
}

model TimeSlot {
  id          String    @id @default(uuid())
  startTime   String
  endTime     String
  availableSpots Int
  workshop    Workshop @relation(fields: [workshopId], references: [id])
  workshopId  String
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     Boolean   @default(false)
}

model Booking {
  id          String    @id @default(uuid())
  bookingCode String    @unique
  status      BookingStatus @default(PENDING)
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  workshop    Workshop @relation(fields: [workshopId], references: [id])
  workshopId  String
  timeSlot    TimeSlot @relation(fields: [timeSlotId], references: [id])
  timeSlotId  String
  attendeeName String
  attendeeEmail String
  numAttendees Int      @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deleted     Boolean   @default(false)
}

model Subscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  adminId   String
  admin     User     @relation(fields: [adminId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
} 